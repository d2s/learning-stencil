/**
 * This is an autogenerated file created by the Stencil build process.
 * It contains typing information for all components that exist in this project
 * and imports for stencil collections that might be configured in your stencil.config.js file
 */

import '@stencil/router';

import { AboutPage as AboutPage } from './components/about-page/about-page';

interface HTMLAboutPageElement extends AboutPage, HTMLElement {
}
declare var HTMLAboutPageElement: {
  prototype: HTMLAboutPageElement;
  new (): HTMLAboutPageElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "about-page": HTMLAboutPageElement;
  }
  interface ElementTagNameMap {
      "about-page": HTMLAboutPageElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "about-page": JSXElements.AboutPageAttributes;
      }
  }
  namespace JSXElements {
      export interface AboutPageAttributes extends HTMLAttributes {
          mode?: string,
          color?: string,
        
      }
  }
}

import { BasicCard as BasicCard } from './components/basic-card/basic-card';

interface HTMLBasicCardElement extends BasicCard, HTMLElement {
}
declare var HTMLBasicCardElement: {
  prototype: HTMLBasicCardElement;
  new (): HTMLBasicCardElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "basic-card": HTMLBasicCardElement;
  }
  interface ElementTagNameMap {
      "basic-card": HTMLBasicCardElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "basic-card": JSXElements.BasicCardAttributes;
      }
  }
  namespace JSXElements {
      export interface BasicCardAttributes extends HTMLAttributes {
          mode?: string,
          color?: string,
        
          title?: string,
          content?: string,
          description?: string,
          date?: string,
          location?: string,
          youtube_video?: string
      }
  }
}

import { BasicEvent as BasicEvent } from './components/basic-event/basic-event';

interface HTMLBasicEventElement extends BasicEvent, HTMLElement {
}
declare var HTMLBasicEventElement: {
  prototype: HTMLBasicEventElement;
  new (): HTMLBasicEventElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "basic-event": HTMLBasicEventElement;
  }
  interface ElementTagNameMap {
      "basic-event": HTMLBasicEventElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "basic-event": JSXElements.BasicEventAttributes;
      }
  }
  namespace JSXElements {
      export interface BasicEventAttributes extends HTMLAttributes {
          mode?: string,
          color?: string,
        
          name?: string,
          description?: string,
          date?: string,
          location?: string
      }
  }
}

import { BasicCard as BasicSite } from './components/basic-site/basic-site';

interface HTMLBasicSiteElement extends BasicSite, HTMLElement {
}
declare var HTMLBasicSiteElement: {
  prototype: HTMLBasicSiteElement;
  new (): HTMLBasicSiteElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "basic-site": HTMLBasicSiteElement;
  }
  interface ElementTagNameMap {
      "basic-site": HTMLBasicSiteElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "basic-site": JSXElements.BasicSiteAttributes;
      }
  }
  namespace JSXElements {
      export interface BasicSiteAttributes extends HTMLAttributes {
          mode?: string,
          color?: string,
        
          title?: string
      }
  }
}

import { HomePage as HomePage } from './components/home-page/home-page';

interface HTMLHomePageElement extends HomePage, HTMLElement {
}
declare var HTMLHomePageElement: {
  prototype: HTMLHomePageElement;
  new (): HTMLHomePageElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "home-page": HTMLHomePageElement;
  }
  interface ElementTagNameMap {
      "home-page": HTMLHomePageElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "home-page": JSXElements.HomePageAttributes;
      }
  }
  namespace JSXElements {
      export interface HomePageAttributes extends HTMLAttributes {
          mode?: string,
          color?: string,
        
      }
  }
}

import { MyName as MyName } from './components/my-name/my-name';

interface HTMLMyNameElement extends MyName, HTMLElement {
}
declare var HTMLMyNameElement: {
  prototype: HTMLMyNameElement;
  new (): HTMLMyNameElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "my-name": HTMLMyNameElement;
  }
  interface ElementTagNameMap {
      "my-name": HTMLMyNameElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "my-name": JSXElements.MyNameAttributes;
      }
  }
  namespace JSXElements {
      export interface MyNameAttributes extends HTMLAttributes {
          mode?: string,
          color?: string,
        
          first?: string,
          last?: string
      }
  }
}

import { OtherSites as OtherSites } from './components/other-sites/other-sites';

interface HTMLOtherSitesElement extends OtherSites, HTMLElement {
}
declare var HTMLOtherSitesElement: {
  prototype: HTMLOtherSitesElement;
  new (): HTMLOtherSitesElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "other-sites": HTMLOtherSitesElement;
  }
  interface ElementTagNameMap {
      "other-sites": HTMLOtherSitesElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "other-sites": JSXElements.OtherSitesAttributes;
      }
  }
  namespace JSXElements {
      export interface OtherSitesAttributes extends HTMLAttributes {
          mode?: string,
          color?: string,
        
          names?: boolean,
          twitter?: string,
          github?: string
      }
  }
}

import { SiteHeader as SiteHeader } from './components/site-header/site-header';

interface HTMLSiteHeaderElement extends SiteHeader, HTMLElement {
}
declare var HTMLSiteHeaderElement: {
  prototype: HTMLSiteHeaderElement;
  new (): HTMLSiteHeaderElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "site-header": HTMLSiteHeaderElement;
  }
  interface ElementTagNameMap {
      "site-header": HTMLSiteHeaderElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "site-header": JSXElements.SiteHeaderAttributes;
      }
  }
  namespace JSXElements {
      export interface SiteHeaderAttributes extends HTMLAttributes {
          mode?: string,
          color?: string,
        
      }
  }
}

import { DocumentComponent as YoutubeVideo } from './components/youtube-video/youtube-video';

interface HTMLYoutubeVideoElement extends YoutubeVideo, HTMLElement {
}
declare var HTMLYoutubeVideoElement: {
  prototype: HTMLYoutubeVideoElement;
  new (): HTMLYoutubeVideoElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "youtube-video": HTMLYoutubeVideoElement;
  }
  interface ElementTagNameMap {
      "youtube-video": HTMLYoutubeVideoElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "youtube-video": JSXElements.YoutubeVideoAttributes;
      }
  }
  namespace JSXElements {
      export interface YoutubeVideoAttributes extends HTMLAttributes {
          mode?: string,
          color?: string,
        
          video?: string,
          width?: number,
          height?: number,
          fullscreen?: boolean
      }
  }
}

